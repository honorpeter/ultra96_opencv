// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cv_hw,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.334000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=26,HLS_SYN_FF=2317,HLS_SYN_LUT=3589,HLS_VERSION=2018_2}" *)

module cv_hw (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        op_stream_TDATA,
        op_stream_TVALID,
        op_stream_TREADY,
        op_stream_TKEEP,
        op_stream_TSTRB,
        op_stream_TUSER,
        op_stream_TLAST,
        op_stream_TID,
        op_stream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [0:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [0:0] in_stream_TID;
input  [0:0] in_stream_TDEST;
output  [31:0] op_stream_TDATA;
output   op_stream_TVALID;
input   op_stream_TREADY;
output  [3:0] op_stream_TKEEP;
output  [3:0] op_stream_TSTRB;
output  [0:0] op_stream_TUSER;
output  [0:0] op_stream_TLAST;
output  [0:0] op_stream_TID;
output  [0:0] op_stream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] in_stream_V_data_V_0_data_out;
wire    in_stream_V_data_V_0_vld_in;
wire    in_stream_V_data_V_0_vld_out;
wire    in_stream_V_data_V_0_ack_in;
reg    in_stream_V_data_V_0_ack_out;
reg   [31:0] in_stream_V_data_V_0_payload_A;
reg   [31:0] in_stream_V_data_V_0_payload_B;
reg    in_stream_V_data_V_0_sel_rd;
reg    in_stream_V_data_V_0_sel_wr;
wire    in_stream_V_data_V_0_sel;
wire    in_stream_V_data_V_0_load_A;
wire    in_stream_V_data_V_0_load_B;
reg   [1:0] in_stream_V_data_V_0_state;
wire    in_stream_V_data_V_0_state_cmp_full;
reg   [3:0] in_stream_V_keep_V_0_data_out;
wire    in_stream_V_keep_V_0_vld_in;
wire    in_stream_V_keep_V_0_vld_out;
wire    in_stream_V_keep_V_0_ack_in;
reg    in_stream_V_keep_V_0_ack_out;
reg   [3:0] in_stream_V_keep_V_0_payload_A;
reg   [3:0] in_stream_V_keep_V_0_payload_B;
reg    in_stream_V_keep_V_0_sel_rd;
reg    in_stream_V_keep_V_0_sel_wr;
wire    in_stream_V_keep_V_0_sel;
wire    in_stream_V_keep_V_0_load_A;
wire    in_stream_V_keep_V_0_load_B;
reg   [1:0] in_stream_V_keep_V_0_state;
wire    in_stream_V_keep_V_0_state_cmp_full;
reg   [3:0] in_stream_V_strb_V_0_data_out;
wire    in_stream_V_strb_V_0_vld_in;
wire    in_stream_V_strb_V_0_vld_out;
wire    in_stream_V_strb_V_0_ack_in;
reg    in_stream_V_strb_V_0_ack_out;
reg   [3:0] in_stream_V_strb_V_0_payload_A;
reg   [3:0] in_stream_V_strb_V_0_payload_B;
reg    in_stream_V_strb_V_0_sel_rd;
reg    in_stream_V_strb_V_0_sel_wr;
wire    in_stream_V_strb_V_0_sel;
wire    in_stream_V_strb_V_0_load_A;
wire    in_stream_V_strb_V_0_load_B;
reg   [1:0] in_stream_V_strb_V_0_state;
wire    in_stream_V_strb_V_0_state_cmp_full;
reg   [0:0] in_stream_V_user_V_0_data_out;
wire    in_stream_V_user_V_0_vld_in;
wire    in_stream_V_user_V_0_vld_out;
wire    in_stream_V_user_V_0_ack_in;
reg    in_stream_V_user_V_0_ack_out;
reg   [0:0] in_stream_V_user_V_0_payload_A;
reg   [0:0] in_stream_V_user_V_0_payload_B;
reg    in_stream_V_user_V_0_sel_rd;
reg    in_stream_V_user_V_0_sel_wr;
wire    in_stream_V_user_V_0_sel;
wire    in_stream_V_user_V_0_load_A;
wire    in_stream_V_user_V_0_load_B;
reg   [1:0] in_stream_V_user_V_0_state;
wire    in_stream_V_user_V_0_state_cmp_full;
reg   [0:0] in_stream_V_last_V_0_data_out;
wire    in_stream_V_last_V_0_vld_in;
wire    in_stream_V_last_V_0_vld_out;
wire    in_stream_V_last_V_0_ack_in;
reg    in_stream_V_last_V_0_ack_out;
reg   [0:0] in_stream_V_last_V_0_payload_A;
reg   [0:0] in_stream_V_last_V_0_payload_B;
reg    in_stream_V_last_V_0_sel_rd;
reg    in_stream_V_last_V_0_sel_wr;
wire    in_stream_V_last_V_0_sel;
wire    in_stream_V_last_V_0_load_A;
wire    in_stream_V_last_V_0_load_B;
reg   [1:0] in_stream_V_last_V_0_state;
wire    in_stream_V_last_V_0_state_cmp_full;
reg   [0:0] in_stream_V_id_V_0_data_out;
wire    in_stream_V_id_V_0_vld_in;
wire    in_stream_V_id_V_0_vld_out;
wire    in_stream_V_id_V_0_ack_in;
reg    in_stream_V_id_V_0_ack_out;
reg   [0:0] in_stream_V_id_V_0_payload_A;
reg   [0:0] in_stream_V_id_V_0_payload_B;
reg    in_stream_V_id_V_0_sel_rd;
reg    in_stream_V_id_V_0_sel_wr;
wire    in_stream_V_id_V_0_sel;
wire    in_stream_V_id_V_0_load_A;
wire    in_stream_V_id_V_0_load_B;
reg   [1:0] in_stream_V_id_V_0_state;
wire    in_stream_V_id_V_0_state_cmp_full;
reg   [0:0] in_stream_V_dest_V_0_data_out;
wire    in_stream_V_dest_V_0_vld_in;
wire    in_stream_V_dest_V_0_vld_out;
wire    in_stream_V_dest_V_0_ack_in;
reg    in_stream_V_dest_V_0_ack_out;
reg   [0:0] in_stream_V_dest_V_0_payload_A;
reg   [0:0] in_stream_V_dest_V_0_payload_B;
reg    in_stream_V_dest_V_0_sel_rd;
reg    in_stream_V_dest_V_0_sel_wr;
wire    in_stream_V_dest_V_0_sel;
wire    in_stream_V_dest_V_0_load_A;
wire    in_stream_V_dest_V_0_load_B;
reg   [1:0] in_stream_V_dest_V_0_state;
wire    in_stream_V_dest_V_0_state_cmp_full;
reg   [31:0] op_stream_V_data_V_1_data_out;
reg    op_stream_V_data_V_1_vld_in;
wire    op_stream_V_data_V_1_vld_out;
wire    op_stream_V_data_V_1_ack_in;
wire    op_stream_V_data_V_1_ack_out;
reg   [31:0] op_stream_V_data_V_1_payload_A;
reg   [31:0] op_stream_V_data_V_1_payload_B;
reg    op_stream_V_data_V_1_sel_rd;
reg    op_stream_V_data_V_1_sel_wr;
wire    op_stream_V_data_V_1_sel;
wire    op_stream_V_data_V_1_load_A;
wire    op_stream_V_data_V_1_load_B;
reg   [1:0] op_stream_V_data_V_1_state;
wire    op_stream_V_data_V_1_state_cmp_full;
reg   [3:0] op_stream_V_keep_V_1_data_out;
reg    op_stream_V_keep_V_1_vld_in;
wire    op_stream_V_keep_V_1_vld_out;
wire    op_stream_V_keep_V_1_ack_in;
wire    op_stream_V_keep_V_1_ack_out;
reg   [3:0] op_stream_V_keep_V_1_payload_A;
reg   [3:0] op_stream_V_keep_V_1_payload_B;
reg    op_stream_V_keep_V_1_sel_rd;
reg    op_stream_V_keep_V_1_sel_wr;
wire    op_stream_V_keep_V_1_sel;
wire    op_stream_V_keep_V_1_load_A;
wire    op_stream_V_keep_V_1_load_B;
reg   [1:0] op_stream_V_keep_V_1_state;
wire    op_stream_V_keep_V_1_state_cmp_full;
reg   [3:0] op_stream_V_strb_V_1_data_out;
reg    op_stream_V_strb_V_1_vld_in;
wire    op_stream_V_strb_V_1_vld_out;
wire    op_stream_V_strb_V_1_ack_in;
wire    op_stream_V_strb_V_1_ack_out;
reg   [3:0] op_stream_V_strb_V_1_payload_A;
reg   [3:0] op_stream_V_strb_V_1_payload_B;
reg    op_stream_V_strb_V_1_sel_rd;
reg    op_stream_V_strb_V_1_sel_wr;
wire    op_stream_V_strb_V_1_sel;
wire    op_stream_V_strb_V_1_load_A;
wire    op_stream_V_strb_V_1_load_B;
reg   [1:0] op_stream_V_strb_V_1_state;
wire    op_stream_V_strb_V_1_state_cmp_full;
reg   [0:0] op_stream_V_user_V_1_data_out;
reg    op_stream_V_user_V_1_vld_in;
wire    op_stream_V_user_V_1_vld_out;
wire    op_stream_V_user_V_1_ack_in;
wire    op_stream_V_user_V_1_ack_out;
reg   [0:0] op_stream_V_user_V_1_payload_A;
reg   [0:0] op_stream_V_user_V_1_payload_B;
reg    op_stream_V_user_V_1_sel_rd;
reg    op_stream_V_user_V_1_sel_wr;
wire    op_stream_V_user_V_1_sel;
wire    op_stream_V_user_V_1_load_A;
wire    op_stream_V_user_V_1_load_B;
reg   [1:0] op_stream_V_user_V_1_state;
wire    op_stream_V_user_V_1_state_cmp_full;
reg   [0:0] op_stream_V_last_V_1_data_out;
reg    op_stream_V_last_V_1_vld_in;
wire    op_stream_V_last_V_1_vld_out;
wire    op_stream_V_last_V_1_ack_in;
wire    op_stream_V_last_V_1_ack_out;
reg   [0:0] op_stream_V_last_V_1_payload_A;
reg   [0:0] op_stream_V_last_V_1_payload_B;
reg    op_stream_V_last_V_1_sel_rd;
reg    op_stream_V_last_V_1_sel_wr;
wire    op_stream_V_last_V_1_sel;
wire    op_stream_V_last_V_1_load_A;
wire    op_stream_V_last_V_1_load_B;
reg   [1:0] op_stream_V_last_V_1_state;
wire    op_stream_V_last_V_1_state_cmp_full;
reg   [0:0] op_stream_V_id_V_1_data_out;
reg    op_stream_V_id_V_1_vld_in;
wire    op_stream_V_id_V_1_vld_out;
wire    op_stream_V_id_V_1_ack_in;
wire    op_stream_V_id_V_1_ack_out;
reg   [0:0] op_stream_V_id_V_1_payload_A;
reg   [0:0] op_stream_V_id_V_1_payload_B;
reg    op_stream_V_id_V_1_sel_rd;
reg    op_stream_V_id_V_1_sel_wr;
wire    op_stream_V_id_V_1_sel;
wire    op_stream_V_id_V_1_load_A;
wire    op_stream_V_id_V_1_load_B;
reg   [1:0] op_stream_V_id_V_1_state;
wire    op_stream_V_id_V_1_state_cmp_full;
reg   [0:0] op_stream_V_dest_V_1_data_out;
reg    op_stream_V_dest_V_1_vld_in;
wire    op_stream_V_dest_V_1_vld_out;
wire    op_stream_V_dest_V_1_ack_in;
wire    op_stream_V_dest_V_1_ack_out;
reg   [0:0] op_stream_V_dest_V_1_payload_A;
reg   [0:0] op_stream_V_dest_V_1_payload_B;
reg    op_stream_V_dest_V_1_sel_rd;
reg    op_stream_V_dest_V_1_sel_wr;
wire    op_stream_V_dest_V_1_sel;
wire    op_stream_V_dest_V_1_load_A;
wire    op_stream_V_dest_V_1_load_B;
reg   [1:0] op_stream_V_dest_V_1_state;
wire    op_stream_V_dest_V_1_state_cmp_full;
wire   [15:0] rows;
wire   [15:0] cols;
wire   [7:0] flag;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    op_stream_TDATA_blk_n;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg   [0:0] tmp_2_reg_415;
wire   [63:0] grp_fu_186_p1;
reg   [63:0] reg_192;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_175_p2;
reg   [63:0] reg_197;
wire    ap_CS_fsm_state16;
wire   [0:0] tmp_2_fu_211_p2;
wire   [0:0] tmp_8_fu_217_p2;
reg   [0:0] tmp_8_reg_419;
reg   [3:0] tmp_keep_V_reg_423;
reg   [3:0] tmp_strb_V_reg_428;
reg   [0:0] tmp_user_V_reg_433;
reg   [0:0] tmp_last_V_reg_438;
reg   [0:0] tmp_id_V_reg_443;
reg   [0:0] tmp_dest_V_reg_448;
wire   [31:0] tmp_5_fu_254_p1;
reg   [7:0] tmp_13_reg_463;
wire   [63:0] grp_fu_189_p1;
reg   [63:0] tmp_10_reg_468;
wire   [31:0] tmp_14_fu_284_p1;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_180_p2;
reg   [63:0] tmp_11_reg_478;
wire   [63:0] grp_fu_171_p2;
reg   [63:0] tmp_12_reg_483;
reg   [10:0] loc_V_reg_488;
wire    ap_CS_fsm_state21;
wire   [51:0] loc_V_1_fu_302_p1;
reg   [51:0] loc_V_1_reg_494;
wire   [31:0] p_Val2_4_fu_399_p3;
reg    ap_block_state23;
reg    ap_block_state23_io;
reg   [63:0] grp_fu_171_p0;
reg   [63:0] grp_fu_171_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
reg   [63:0] grp_fu_175_p1;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_186_p0;
wire   [31:0] grp_fu_189_p0;
wire   [31:0] tmp_3_fu_408_p2;
wire   [7:0] tmp_fu_250_p1;
wire   [7:0] tmp_9_fu_259_p4;
wire   [63:0] p_Val2_s_fu_288_p1;
wire   [53:0] tmp_1_i_i_i_fu_306_p4;
wire   [11:0] tmp_i_i_i_i_cast1_fu_319_p1;
wire   [11:0] sh_assign_fu_322_p2;
wire   [10:0] tmp_3_i_i_i_fu_336_p2;
wire   [0:0] isNeg_fu_328_p3;
wire  signed [11:0] tmp_3_i_i_i_cast_fu_341_p1;
wire   [11:0] sh_assign_1_fu_345_p3;
wire  signed [31:0] sh_assign_1_cast_fu_353_p1;
wire   [53:0] tmp_5_i_i_i_cast_fu_361_p1;
wire   [136:0] tmp_1_i_i_i_cast_fu_315_p1;
wire   [136:0] tmp_5_i_i_i_fu_357_p1;
wire   [53:0] tmp_6_i_i_i_fu_365_p2;
wire   [0:0] tmp_21_fu_377_p3;
wire   [136:0] tmp_8_i_i_i_fu_371_p2;
wire   [31:0] tmp_17_fu_385_p1;
wire   [31:0] tmp_18_fu_389_p4;
wire   [15:0] tmp_3_fu_408_p0;
wire   [15:0] tmp_3_fu_408_p1;
reg    grp_fu_186_ce;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_fu_189_ce;
reg   [22:0] ap_NS_fsm;
wire   [31:0] tmp_3_fu_408_p00;
wire   [31:0] tmp_3_fu_408_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 in_stream_V_data_V_0_sel_rd = 1'b0;
#0 in_stream_V_data_V_0_sel_wr = 1'b0;
#0 in_stream_V_data_V_0_state = 2'd0;
#0 in_stream_V_keep_V_0_sel_rd = 1'b0;
#0 in_stream_V_keep_V_0_sel_wr = 1'b0;
#0 in_stream_V_keep_V_0_state = 2'd0;
#0 in_stream_V_strb_V_0_sel_rd = 1'b0;
#0 in_stream_V_strb_V_0_sel_wr = 1'b0;
#0 in_stream_V_strb_V_0_state = 2'd0;
#0 in_stream_V_user_V_0_sel_rd = 1'b0;
#0 in_stream_V_user_V_0_sel_wr = 1'b0;
#0 in_stream_V_user_V_0_state = 2'd0;
#0 in_stream_V_last_V_0_sel_rd = 1'b0;
#0 in_stream_V_last_V_0_sel_wr = 1'b0;
#0 in_stream_V_last_V_0_state = 2'd0;
#0 in_stream_V_id_V_0_sel_rd = 1'b0;
#0 in_stream_V_id_V_0_sel_wr = 1'b0;
#0 in_stream_V_id_V_0_state = 2'd0;
#0 in_stream_V_dest_V_0_sel_rd = 1'b0;
#0 in_stream_V_dest_V_0_sel_wr = 1'b0;
#0 in_stream_V_dest_V_0_state = 2'd0;
#0 op_stream_V_data_V_1_sel_rd = 1'b0;
#0 op_stream_V_data_V_1_sel_wr = 1'b0;
#0 op_stream_V_data_V_1_state = 2'd0;
#0 op_stream_V_keep_V_1_sel_rd = 1'b0;
#0 op_stream_V_keep_V_1_sel_wr = 1'b0;
#0 op_stream_V_keep_V_1_state = 2'd0;
#0 op_stream_V_strb_V_1_sel_rd = 1'b0;
#0 op_stream_V_strb_V_1_sel_wr = 1'b0;
#0 op_stream_V_strb_V_1_state = 2'd0;
#0 op_stream_V_user_V_1_sel_rd = 1'b0;
#0 op_stream_V_user_V_1_sel_wr = 1'b0;
#0 op_stream_V_user_V_1_state = 2'd0;
#0 op_stream_V_last_V_1_sel_rd = 1'b0;
#0 op_stream_V_last_V_1_sel_wr = 1'b0;
#0 op_stream_V_last_V_1_state = 2'd0;
#0 op_stream_V_id_V_1_sel_rd = 1'b0;
#0 op_stream_V_id_V_1_sel_wr = 1'b0;
#0 op_stream_V_id_V_1_state = 2'd0;
#0 op_stream_V_dest_V_1_sel_rd = 1'b0;
#0 op_stream_V_dest_V_1_sel_wr = 1'b0;
#0 op_stream_V_dest_V_1_state = 2'd0;
end

cv_hw_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
cv_hw_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .rows(rows),
    .cols(cols),
    .flag(flag)
);

cv_hw_dadd_64ns_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cv_hw_dadd_64ns_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_171_p0),
    .din1(grp_fu_171_p1),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

cv_hw_dmul_64ns_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cv_hw_dmul_64ns_6cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_192),
    .din1(grp_fu_175_p1),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

cv_hw_dmul_64ns_6cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
cv_hw_dmul_64ns_6cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_10_reg_468),
    .din1(64'd4603489467105573601),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

cv_hw_sitodp_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
cv_hw_sitodp_32nsdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_186_p0),
    .ce(grp_fu_186_ce),
    .dout(grp_fu_186_p1)
);

cv_hw_sitodp_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
cv_hw_sitodp_32nsdEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_189_p0),
    .ce(grp_fu_189_ce),
    .dout(grp_fu_189_p1)
);

cv_hw_mul_mul_16neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
cv_hw_mul_mul_16neOg_U6(
    .din0(tmp_3_fu_408_p0),
    .din1(tmp_3_fu_408_p1),
    .dout(tmp_3_fu_408_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_data_V_0_ack_out == 1'b1) & (in_stream_V_data_V_0_vld_out == 1'b1))) begin
            in_stream_V_data_V_0_sel_rd <= ~in_stream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_data_V_0_ack_in == 1'b1) & (in_stream_V_data_V_0_vld_in == 1'b1))) begin
            in_stream_V_data_V_0_sel_wr <= ~in_stream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_data_V_0_state == 2'd2) & (in_stream_V_data_V_0_vld_in == 1'b0)) | ((in_stream_V_data_V_0_state == 2'd3) & (in_stream_V_data_V_0_vld_in == 1'b0) & (in_stream_V_data_V_0_ack_out == 1'b1)))) begin
            in_stream_V_data_V_0_state <= 2'd2;
        end else if ((((in_stream_V_data_V_0_state == 2'd1) & (in_stream_V_data_V_0_ack_out == 1'b0)) | ((in_stream_V_data_V_0_state == 2'd3) & (in_stream_V_data_V_0_ack_out == 1'b0) & (in_stream_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream_V_data_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_data_V_0_vld_in == 1'b0) & (in_stream_V_data_V_0_ack_out == 1'b1)) & ~((in_stream_V_data_V_0_ack_out == 1'b0) & (in_stream_V_data_V_0_vld_in == 1'b1)) & (in_stream_V_data_V_0_state == 2'd3)) | ((in_stream_V_data_V_0_state == 2'd1) & (in_stream_V_data_V_0_ack_out == 1'b1)) | ((in_stream_V_data_V_0_state == 2'd2) & (in_stream_V_data_V_0_vld_in == 1'b1)))) begin
            in_stream_V_data_V_0_state <= 2'd3;
        end else begin
            in_stream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_dest_V_0_ack_out == 1'b1) & (in_stream_V_dest_V_0_vld_out == 1'b1))) begin
            in_stream_V_dest_V_0_sel_rd <= ~in_stream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_dest_V_0_ack_in == 1'b1) & (in_stream_V_dest_V_0_vld_in == 1'b1))) begin
            in_stream_V_dest_V_0_sel_wr <= ~in_stream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_dest_V_0_state == 2'd2) & (in_stream_V_dest_V_0_vld_in == 1'b0)) | ((in_stream_V_dest_V_0_state == 2'd3) & (in_stream_V_dest_V_0_vld_in == 1'b0) & (in_stream_V_dest_V_0_ack_out == 1'b1)))) begin
            in_stream_V_dest_V_0_state <= 2'd2;
        end else if ((((in_stream_V_dest_V_0_state == 2'd1) & (in_stream_V_dest_V_0_ack_out == 1'b0)) | ((in_stream_V_dest_V_0_state == 2'd3) & (in_stream_V_dest_V_0_ack_out == 1'b0) & (in_stream_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_dest_V_0_vld_in == 1'b0) & (in_stream_V_dest_V_0_ack_out == 1'b1)) & ~((in_stream_V_dest_V_0_ack_out == 1'b0) & (in_stream_V_dest_V_0_vld_in == 1'b1)) & (in_stream_V_dest_V_0_state == 2'd3)) | ((in_stream_V_dest_V_0_state == 2'd1) & (in_stream_V_dest_V_0_ack_out == 1'b1)) | ((in_stream_V_dest_V_0_state == 2'd2) & (in_stream_V_dest_V_0_vld_in == 1'b1)))) begin
            in_stream_V_dest_V_0_state <= 2'd3;
        end else begin
            in_stream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_id_V_0_ack_out == 1'b1) & (in_stream_V_id_V_0_vld_out == 1'b1))) begin
            in_stream_V_id_V_0_sel_rd <= ~in_stream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_id_V_0_ack_in == 1'b1) & (in_stream_V_id_V_0_vld_in == 1'b1))) begin
            in_stream_V_id_V_0_sel_wr <= ~in_stream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_id_V_0_state == 2'd2) & (in_stream_V_id_V_0_vld_in == 1'b0)) | ((in_stream_V_id_V_0_state == 2'd3) & (in_stream_V_id_V_0_vld_in == 1'b0) & (in_stream_V_id_V_0_ack_out == 1'b1)))) begin
            in_stream_V_id_V_0_state <= 2'd2;
        end else if ((((in_stream_V_id_V_0_state == 2'd1) & (in_stream_V_id_V_0_ack_out == 1'b0)) | ((in_stream_V_id_V_0_state == 2'd3) & (in_stream_V_id_V_0_ack_out == 1'b0) & (in_stream_V_id_V_0_vld_in == 1'b1)))) begin
            in_stream_V_id_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_id_V_0_vld_in == 1'b0) & (in_stream_V_id_V_0_ack_out == 1'b1)) & ~((in_stream_V_id_V_0_ack_out == 1'b0) & (in_stream_V_id_V_0_vld_in == 1'b1)) & (in_stream_V_id_V_0_state == 2'd3)) | ((in_stream_V_id_V_0_state == 2'd1) & (in_stream_V_id_V_0_ack_out == 1'b1)) | ((in_stream_V_id_V_0_state == 2'd2) & (in_stream_V_id_V_0_vld_in == 1'b1)))) begin
            in_stream_V_id_V_0_state <= 2'd3;
        end else begin
            in_stream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_keep_V_0_ack_out == 1'b1) & (in_stream_V_keep_V_0_vld_out == 1'b1))) begin
            in_stream_V_keep_V_0_sel_rd <= ~in_stream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_keep_V_0_ack_in == 1'b1) & (in_stream_V_keep_V_0_vld_in == 1'b1))) begin
            in_stream_V_keep_V_0_sel_wr <= ~in_stream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_keep_V_0_state == 2'd2) & (in_stream_V_keep_V_0_vld_in == 1'b0)) | ((in_stream_V_keep_V_0_state == 2'd3) & (in_stream_V_keep_V_0_vld_in == 1'b0) & (in_stream_V_keep_V_0_ack_out == 1'b1)))) begin
            in_stream_V_keep_V_0_state <= 2'd2;
        end else if ((((in_stream_V_keep_V_0_state == 2'd1) & (in_stream_V_keep_V_0_ack_out == 1'b0)) | ((in_stream_V_keep_V_0_state == 2'd3) & (in_stream_V_keep_V_0_ack_out == 1'b0) & (in_stream_V_keep_V_0_vld_in == 1'b1)))) begin
            in_stream_V_keep_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_keep_V_0_vld_in == 1'b0) & (in_stream_V_keep_V_0_ack_out == 1'b1)) & ~((in_stream_V_keep_V_0_ack_out == 1'b0) & (in_stream_V_keep_V_0_vld_in == 1'b1)) & (in_stream_V_keep_V_0_state == 2'd3)) | ((in_stream_V_keep_V_0_state == 2'd1) & (in_stream_V_keep_V_0_ack_out == 1'b1)) | ((in_stream_V_keep_V_0_state == 2'd2) & (in_stream_V_keep_V_0_vld_in == 1'b1)))) begin
            in_stream_V_keep_V_0_state <= 2'd3;
        end else begin
            in_stream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_last_V_0_ack_out == 1'b1) & (in_stream_V_last_V_0_vld_out == 1'b1))) begin
            in_stream_V_last_V_0_sel_rd <= ~in_stream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_last_V_0_ack_in == 1'b1) & (in_stream_V_last_V_0_vld_in == 1'b1))) begin
            in_stream_V_last_V_0_sel_wr <= ~in_stream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd2;
        end else if ((((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)) & ~((in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)) & (in_stream_V_last_V_0_state == 2'd3)) | ((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b1)) | ((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd3;
        end else begin
            in_stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_strb_V_0_ack_out == 1'b1) & (in_stream_V_strb_V_0_vld_out == 1'b1))) begin
            in_stream_V_strb_V_0_sel_rd <= ~in_stream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_strb_V_0_ack_in == 1'b1) & (in_stream_V_strb_V_0_vld_in == 1'b1))) begin
            in_stream_V_strb_V_0_sel_wr <= ~in_stream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_strb_V_0_state == 2'd2) & (in_stream_V_strb_V_0_vld_in == 1'b0)) | ((in_stream_V_strb_V_0_state == 2'd3) & (in_stream_V_strb_V_0_vld_in == 1'b0) & (in_stream_V_strb_V_0_ack_out == 1'b1)))) begin
            in_stream_V_strb_V_0_state <= 2'd2;
        end else if ((((in_stream_V_strb_V_0_state == 2'd1) & (in_stream_V_strb_V_0_ack_out == 1'b0)) | ((in_stream_V_strb_V_0_state == 2'd3) & (in_stream_V_strb_V_0_ack_out == 1'b0) & (in_stream_V_strb_V_0_vld_in == 1'b1)))) begin
            in_stream_V_strb_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_strb_V_0_vld_in == 1'b0) & (in_stream_V_strb_V_0_ack_out == 1'b1)) & ~((in_stream_V_strb_V_0_ack_out == 1'b0) & (in_stream_V_strb_V_0_vld_in == 1'b1)) & (in_stream_V_strb_V_0_state == 2'd3)) | ((in_stream_V_strb_V_0_state == 2'd1) & (in_stream_V_strb_V_0_ack_out == 1'b1)) | ((in_stream_V_strb_V_0_state == 2'd2) & (in_stream_V_strb_V_0_vld_in == 1'b1)))) begin
            in_stream_V_strb_V_0_state <= 2'd3;
        end else begin
            in_stream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_user_V_0_ack_out == 1'b1) & (in_stream_V_user_V_0_vld_out == 1'b1))) begin
            in_stream_V_user_V_0_sel_rd <= ~in_stream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_user_V_0_ack_in == 1'b1) & (in_stream_V_user_V_0_vld_in == 1'b1))) begin
            in_stream_V_user_V_0_sel_wr <= ~in_stream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_user_V_0_state == 2'd2) & (in_stream_V_user_V_0_vld_in == 1'b0)) | ((in_stream_V_user_V_0_state == 2'd3) & (in_stream_V_user_V_0_vld_in == 1'b0) & (in_stream_V_user_V_0_ack_out == 1'b1)))) begin
            in_stream_V_user_V_0_state <= 2'd2;
        end else if ((((in_stream_V_user_V_0_state == 2'd1) & (in_stream_V_user_V_0_ack_out == 1'b0)) | ((in_stream_V_user_V_0_state == 2'd3) & (in_stream_V_user_V_0_ack_out == 1'b0) & (in_stream_V_user_V_0_vld_in == 1'b1)))) begin
            in_stream_V_user_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_user_V_0_vld_in == 1'b0) & (in_stream_V_user_V_0_ack_out == 1'b1)) & ~((in_stream_V_user_V_0_ack_out == 1'b0) & (in_stream_V_user_V_0_vld_in == 1'b1)) & (in_stream_V_user_V_0_state == 2'd3)) | ((in_stream_V_user_V_0_state == 2'd1) & (in_stream_V_user_V_0_ack_out == 1'b1)) | ((in_stream_V_user_V_0_state == 2'd2) & (in_stream_V_user_V_0_vld_in == 1'b1)))) begin
            in_stream_V_user_V_0_state <= 2'd3;
        end else begin
            in_stream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_data_V_1_ack_out == 1'b1) & (op_stream_V_data_V_1_vld_out == 1'b1))) begin
            op_stream_V_data_V_1_sel_rd <= ~op_stream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_data_V_1_ack_in == 1'b1) & (op_stream_V_data_V_1_vld_in == 1'b1))) begin
            op_stream_V_data_V_1_sel_wr <= ~op_stream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_data_V_1_state == 2'd2) & (op_stream_V_data_V_1_vld_in == 1'b0)) | ((op_stream_V_data_V_1_state == 2'd3) & (op_stream_V_data_V_1_vld_in == 1'b0) & (op_stream_V_data_V_1_ack_out == 1'b1)))) begin
            op_stream_V_data_V_1_state <= 2'd2;
        end else if ((((op_stream_V_data_V_1_state == 2'd1) & (op_stream_V_data_V_1_ack_out == 1'b0)) | ((op_stream_V_data_V_1_state == 2'd3) & (op_stream_V_data_V_1_ack_out == 1'b0) & (op_stream_V_data_V_1_vld_in == 1'b1)))) begin
            op_stream_V_data_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_data_V_1_vld_in == 1'b0) & (op_stream_V_data_V_1_ack_out == 1'b1)) & ~((op_stream_V_data_V_1_ack_out == 1'b0) & (op_stream_V_data_V_1_vld_in == 1'b1)) & (op_stream_V_data_V_1_state == 2'd3)) | ((op_stream_V_data_V_1_state == 2'd1) & (op_stream_V_data_V_1_ack_out == 1'b1)) | ((op_stream_V_data_V_1_state == 2'd2) & (op_stream_V_data_V_1_vld_in == 1'b1)))) begin
            op_stream_V_data_V_1_state <= 2'd3;
        end else begin
            op_stream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_dest_V_1_ack_out == 1'b1) & (op_stream_V_dest_V_1_vld_out == 1'b1))) begin
            op_stream_V_dest_V_1_sel_rd <= ~op_stream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_dest_V_1_ack_in == 1'b1) & (op_stream_V_dest_V_1_vld_in == 1'b1))) begin
            op_stream_V_dest_V_1_sel_wr <= ~op_stream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_dest_V_1_state == 2'd2) & (op_stream_V_dest_V_1_vld_in == 1'b0)) | ((op_stream_V_dest_V_1_state == 2'd3) & (op_stream_V_dest_V_1_vld_in == 1'b0) & (op_stream_V_dest_V_1_ack_out == 1'b1)))) begin
            op_stream_V_dest_V_1_state <= 2'd2;
        end else if ((((op_stream_V_dest_V_1_state == 2'd1) & (op_stream_V_dest_V_1_ack_out == 1'b0)) | ((op_stream_V_dest_V_1_state == 2'd3) & (op_stream_V_dest_V_1_ack_out == 1'b0) & (op_stream_V_dest_V_1_vld_in == 1'b1)))) begin
            op_stream_V_dest_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_dest_V_1_vld_in == 1'b0) & (op_stream_V_dest_V_1_ack_out == 1'b1)) & ~((op_stream_V_dest_V_1_ack_out == 1'b0) & (op_stream_V_dest_V_1_vld_in == 1'b1)) & (op_stream_V_dest_V_1_state == 2'd3)) | ((op_stream_V_dest_V_1_state == 2'd1) & (op_stream_V_dest_V_1_ack_out == 1'b1)) | ((op_stream_V_dest_V_1_state == 2'd2) & (op_stream_V_dest_V_1_vld_in == 1'b1)))) begin
            op_stream_V_dest_V_1_state <= 2'd3;
        end else begin
            op_stream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_id_V_1_ack_out == 1'b1) & (op_stream_V_id_V_1_vld_out == 1'b1))) begin
            op_stream_V_id_V_1_sel_rd <= ~op_stream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_id_V_1_ack_in == 1'b1) & (op_stream_V_id_V_1_vld_in == 1'b1))) begin
            op_stream_V_id_V_1_sel_wr <= ~op_stream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_id_V_1_state == 2'd2) & (op_stream_V_id_V_1_vld_in == 1'b0)) | ((op_stream_V_id_V_1_state == 2'd3) & (op_stream_V_id_V_1_vld_in == 1'b0) & (op_stream_V_id_V_1_ack_out == 1'b1)))) begin
            op_stream_V_id_V_1_state <= 2'd2;
        end else if ((((op_stream_V_id_V_1_state == 2'd1) & (op_stream_V_id_V_1_ack_out == 1'b0)) | ((op_stream_V_id_V_1_state == 2'd3) & (op_stream_V_id_V_1_ack_out == 1'b0) & (op_stream_V_id_V_1_vld_in == 1'b1)))) begin
            op_stream_V_id_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_id_V_1_vld_in == 1'b0) & (op_stream_V_id_V_1_ack_out == 1'b1)) & ~((op_stream_V_id_V_1_ack_out == 1'b0) & (op_stream_V_id_V_1_vld_in == 1'b1)) & (op_stream_V_id_V_1_state == 2'd3)) | ((op_stream_V_id_V_1_state == 2'd1) & (op_stream_V_id_V_1_ack_out == 1'b1)) | ((op_stream_V_id_V_1_state == 2'd2) & (op_stream_V_id_V_1_vld_in == 1'b1)))) begin
            op_stream_V_id_V_1_state <= 2'd3;
        end else begin
            op_stream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_keep_V_1_ack_out == 1'b1) & (op_stream_V_keep_V_1_vld_out == 1'b1))) begin
            op_stream_V_keep_V_1_sel_rd <= ~op_stream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_keep_V_1_ack_in == 1'b1) & (op_stream_V_keep_V_1_vld_in == 1'b1))) begin
            op_stream_V_keep_V_1_sel_wr <= ~op_stream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_keep_V_1_state == 2'd2) & (op_stream_V_keep_V_1_vld_in == 1'b0)) | ((op_stream_V_keep_V_1_state == 2'd3) & (op_stream_V_keep_V_1_vld_in == 1'b0) & (op_stream_V_keep_V_1_ack_out == 1'b1)))) begin
            op_stream_V_keep_V_1_state <= 2'd2;
        end else if ((((op_stream_V_keep_V_1_state == 2'd1) & (op_stream_V_keep_V_1_ack_out == 1'b0)) | ((op_stream_V_keep_V_1_state == 2'd3) & (op_stream_V_keep_V_1_ack_out == 1'b0) & (op_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            op_stream_V_keep_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_keep_V_1_vld_in == 1'b0) & (op_stream_V_keep_V_1_ack_out == 1'b1)) & ~((op_stream_V_keep_V_1_ack_out == 1'b0) & (op_stream_V_keep_V_1_vld_in == 1'b1)) & (op_stream_V_keep_V_1_state == 2'd3)) | ((op_stream_V_keep_V_1_state == 2'd1) & (op_stream_V_keep_V_1_ack_out == 1'b1)) | ((op_stream_V_keep_V_1_state == 2'd2) & (op_stream_V_keep_V_1_vld_in == 1'b1)))) begin
            op_stream_V_keep_V_1_state <= 2'd3;
        end else begin
            op_stream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_last_V_1_ack_out == 1'b1) & (op_stream_V_last_V_1_vld_out == 1'b1))) begin
            op_stream_V_last_V_1_sel_rd <= ~op_stream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_last_V_1_ack_in == 1'b1) & (op_stream_V_last_V_1_vld_in == 1'b1))) begin
            op_stream_V_last_V_1_sel_wr <= ~op_stream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_last_V_1_state == 2'd2) & (op_stream_V_last_V_1_vld_in == 1'b0)) | ((op_stream_V_last_V_1_state == 2'd3) & (op_stream_V_last_V_1_vld_in == 1'b0) & (op_stream_V_last_V_1_ack_out == 1'b1)))) begin
            op_stream_V_last_V_1_state <= 2'd2;
        end else if ((((op_stream_V_last_V_1_state == 2'd1) & (op_stream_V_last_V_1_ack_out == 1'b0)) | ((op_stream_V_last_V_1_state == 2'd3) & (op_stream_V_last_V_1_ack_out == 1'b0) & (op_stream_V_last_V_1_vld_in == 1'b1)))) begin
            op_stream_V_last_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_last_V_1_vld_in == 1'b0) & (op_stream_V_last_V_1_ack_out == 1'b1)) & ~((op_stream_V_last_V_1_ack_out == 1'b0) & (op_stream_V_last_V_1_vld_in == 1'b1)) & (op_stream_V_last_V_1_state == 2'd3)) | ((op_stream_V_last_V_1_state == 2'd1) & (op_stream_V_last_V_1_ack_out == 1'b1)) | ((op_stream_V_last_V_1_state == 2'd2) & (op_stream_V_last_V_1_vld_in == 1'b1)))) begin
            op_stream_V_last_V_1_state <= 2'd3;
        end else begin
            op_stream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_strb_V_1_ack_out == 1'b1) & (op_stream_V_strb_V_1_vld_out == 1'b1))) begin
            op_stream_V_strb_V_1_sel_rd <= ~op_stream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_strb_V_1_ack_in == 1'b1) & (op_stream_V_strb_V_1_vld_in == 1'b1))) begin
            op_stream_V_strb_V_1_sel_wr <= ~op_stream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_strb_V_1_state == 2'd2) & (op_stream_V_strb_V_1_vld_in == 1'b0)) | ((op_stream_V_strb_V_1_state == 2'd3) & (op_stream_V_strb_V_1_vld_in == 1'b0) & (op_stream_V_strb_V_1_ack_out == 1'b1)))) begin
            op_stream_V_strb_V_1_state <= 2'd2;
        end else if ((((op_stream_V_strb_V_1_state == 2'd1) & (op_stream_V_strb_V_1_ack_out == 1'b0)) | ((op_stream_V_strb_V_1_state == 2'd3) & (op_stream_V_strb_V_1_ack_out == 1'b0) & (op_stream_V_strb_V_1_vld_in == 1'b1)))) begin
            op_stream_V_strb_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_strb_V_1_vld_in == 1'b0) & (op_stream_V_strb_V_1_ack_out == 1'b1)) & ~((op_stream_V_strb_V_1_ack_out == 1'b0) & (op_stream_V_strb_V_1_vld_in == 1'b1)) & (op_stream_V_strb_V_1_state == 2'd3)) | ((op_stream_V_strb_V_1_state == 2'd1) & (op_stream_V_strb_V_1_ack_out == 1'b1)) | ((op_stream_V_strb_V_1_state == 2'd2) & (op_stream_V_strb_V_1_vld_in == 1'b1)))) begin
            op_stream_V_strb_V_1_state <= 2'd3;
        end else begin
            op_stream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_stream_V_user_V_1_ack_out == 1'b1) & (op_stream_V_user_V_1_vld_out == 1'b1))) begin
            op_stream_V_user_V_1_sel_rd <= ~op_stream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_stream_V_user_V_1_ack_in == 1'b1) & (op_stream_V_user_V_1_vld_in == 1'b1))) begin
            op_stream_V_user_V_1_sel_wr <= ~op_stream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_stream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((op_stream_V_user_V_1_state == 2'd2) & (op_stream_V_user_V_1_vld_in == 1'b0)) | ((op_stream_V_user_V_1_state == 2'd3) & (op_stream_V_user_V_1_vld_in == 1'b0) & (op_stream_V_user_V_1_ack_out == 1'b1)))) begin
            op_stream_V_user_V_1_state <= 2'd2;
        end else if ((((op_stream_V_user_V_1_state == 2'd1) & (op_stream_V_user_V_1_ack_out == 1'b0)) | ((op_stream_V_user_V_1_state == 2'd3) & (op_stream_V_user_V_1_ack_out == 1'b0) & (op_stream_V_user_V_1_vld_in == 1'b1)))) begin
            op_stream_V_user_V_1_state <= 2'd1;
        end else if (((~((op_stream_V_user_V_1_vld_in == 1'b0) & (op_stream_V_user_V_1_ack_out == 1'b1)) & ~((op_stream_V_user_V_1_ack_out == 1'b0) & (op_stream_V_user_V_1_vld_in == 1'b1)) & (op_stream_V_user_V_1_state == 2'd3)) | ((op_stream_V_user_V_1_state == 2'd1) & (op_stream_V_user_V_1_ack_out == 1'b1)) | ((op_stream_V_user_V_1_state == 2'd2) & (op_stream_V_user_V_1_vld_in == 1'b1)))) begin
            op_stream_V_user_V_1_state <= 2'd3;
        end else begin
            op_stream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_V_0_load_A == 1'b1)) begin
        in_stream_V_data_V_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_V_0_load_B == 1'b1)) begin
        in_stream_V_data_V_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_dest_V_0_load_A == 1'b1)) begin
        in_stream_V_dest_V_0_payload_A <= in_stream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_dest_V_0_load_B == 1'b1)) begin
        in_stream_V_dest_V_0_payload_B <= in_stream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_id_V_0_load_A == 1'b1)) begin
        in_stream_V_id_V_0_payload_A <= in_stream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_id_V_0_load_B == 1'b1)) begin
        in_stream_V_id_V_0_payload_B <= in_stream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_keep_V_0_load_A == 1'b1)) begin
        in_stream_V_keep_V_0_payload_A <= in_stream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_keep_V_0_load_B == 1'b1)) begin
        in_stream_V_keep_V_0_payload_B <= in_stream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_last_V_0_load_A == 1'b1)) begin
        in_stream_V_last_V_0_payload_A <= in_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_last_V_0_load_B == 1'b1)) begin
        in_stream_V_last_V_0_payload_B <= in_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_strb_V_0_load_A == 1'b1)) begin
        in_stream_V_strb_V_0_payload_A <= in_stream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_strb_V_0_load_B == 1'b1)) begin
        in_stream_V_strb_V_0_payload_B <= in_stream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_user_V_0_load_A == 1'b1)) begin
        in_stream_V_user_V_0_payload_A <= in_stream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_user_V_0_load_B == 1'b1)) begin
        in_stream_V_user_V_0_payload_B <= in_stream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        loc_V_1_reg_494 <= loc_V_1_fu_302_p1;
        loc_V_reg_488 <= {{p_Val2_s_fu_288_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_data_V_1_load_A == 1'b1)) begin
        op_stream_V_data_V_1_payload_A <= p_Val2_4_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_data_V_1_load_B == 1'b1)) begin
        op_stream_V_data_V_1_payload_B <= p_Val2_4_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_dest_V_1_load_A == 1'b1)) begin
        op_stream_V_dest_V_1_payload_A <= tmp_dest_V_reg_448;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_dest_V_1_load_B == 1'b1)) begin
        op_stream_V_dest_V_1_payload_B <= tmp_dest_V_reg_448;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_id_V_1_load_A == 1'b1)) begin
        op_stream_V_id_V_1_payload_A <= tmp_id_V_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_id_V_1_load_B == 1'b1)) begin
        op_stream_V_id_V_1_payload_B <= tmp_id_V_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_keep_V_1_load_A == 1'b1)) begin
        op_stream_V_keep_V_1_payload_A <= tmp_keep_V_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_keep_V_1_load_B == 1'b1)) begin
        op_stream_V_keep_V_1_payload_B <= tmp_keep_V_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_last_V_1_load_A == 1'b1)) begin
        op_stream_V_last_V_1_payload_A <= tmp_last_V_reg_438;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_last_V_1_load_B == 1'b1)) begin
        op_stream_V_last_V_1_payload_B <= tmp_last_V_reg_438;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_strb_V_1_load_A == 1'b1)) begin
        op_stream_V_strb_V_1_payload_A <= tmp_strb_V_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_strb_V_1_load_B == 1'b1)) begin
        op_stream_V_strb_V_1_payload_B <= tmp_strb_V_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_user_V_1_load_A == 1'b1)) begin
        op_stream_V_user_V_1_payload_A <= tmp_user_V_reg_433;
    end
end

always @ (posedge ap_clk) begin
    if ((op_stream_V_user_V_1_load_B == 1'b1)) begin
        op_stream_V_user_V_1_payload_B <= tmp_user_V_reg_433;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_192 <= grp_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_197 <= grp_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_10_reg_468 <= grp_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_11_reg_478 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_12_reg_483 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_13_reg_463 <= {{in_stream_V_data_V_0_data_out[23:16]}};
        tmp_dest_V_reg_448 <= in_stream_V_dest_V_0_data_out;
        tmp_id_V_reg_443 <= in_stream_V_id_V_0_data_out;
        tmp_keep_V_reg_423 <= in_stream_V_keep_V_0_data_out;
        tmp_last_V_reg_438 <= in_stream_V_last_V_0_data_out;
        tmp_strb_V_reg_428 <= in_stream_V_strb_V_0_data_out;
        tmp_user_V_reg_433 <= in_stream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_2_reg_415 <= tmp_2_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_211_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_8_reg_419 <= tmp_8_fu_217_p2;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state23_io) | (op_stream_V_dest_V_1_ack_in == 1'b0) | (op_stream_V_id_V_1_ack_in == 1'b0) | (op_stream_V_last_V_1_ack_in == 1'b0) | (op_stream_V_user_V_1_ack_in == 1'b0) | (op_stream_V_strb_V_1_ack_in == 1'b0) | (op_stream_V_keep_V_1_ack_in == 1'b0) | (op_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & ((tmp_8_reg_419 == 1'd1) | (tmp_2_reg_415 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state23_io) | (op_stream_V_dest_V_1_ack_in == 1'b0) | (op_stream_V_id_V_1_ack_in == 1'b0) | (op_stream_V_last_V_1_ack_in == 1'b0) | (op_stream_V_user_V_1_ack_in == 1'b0) | (op_stream_V_strb_V_1_ack_in == 1'b0) | (op_stream_V_keep_V_1_ack_in == 1'b0) | (op_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & ((tmp_8_reg_419 == 1'd1) | (tmp_2_reg_415 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_171_p0 = tmp_12_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_171_p0 = reg_197;
    end else begin
        grp_fu_171_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_171_p1 = reg_197;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_171_p1 = tmp_11_reg_478;
    end else begin
        grp_fu_171_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_175_p1 = 64'd4592590756007337001;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_175_p1 = 64'd4599075939470750515;
    end else begin
        grp_fu_175_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_186_ce = 1'b1;
    end else begin
        grp_fu_186_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_186_p0 = tmp_14_fu_284_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_186_p0 = tmp_5_fu_254_p1;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_189_ce = 1'b1;
    end else begin
        grp_fu_189_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_stream_TDATA_blk_n = in_stream_V_data_V_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_data_V_0_sel == 1'b1)) begin
        in_stream_V_data_V_0_data_out = in_stream_V_data_V_0_payload_B;
    end else begin
        in_stream_V_data_V_0_data_out = in_stream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_dest_V_0_sel == 1'b1)) begin
        in_stream_V_dest_V_0_data_out = in_stream_V_dest_V_0_payload_B;
    end else begin
        in_stream_V_dest_V_0_data_out = in_stream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_id_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_id_V_0_sel == 1'b1)) begin
        in_stream_V_id_V_0_data_out = in_stream_V_id_V_0_payload_B;
    end else begin
        in_stream_V_id_V_0_data_out = in_stream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_keep_V_0_sel == 1'b1)) begin
        in_stream_V_keep_V_0_data_out = in_stream_V_keep_V_0_payload_B;
    end else begin
        in_stream_V_keep_V_0_data_out = in_stream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_last_V_0_sel == 1'b1)) begin
        in_stream_V_last_V_0_data_out = in_stream_V_last_V_0_payload_B;
    end else begin
        in_stream_V_last_V_0_data_out = in_stream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_strb_V_0_sel == 1'b1)) begin
        in_stream_V_strb_V_0_data_out = in_stream_V_strb_V_0_payload_B;
    end else begin
        in_stream_V_strb_V_0_data_out = in_stream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        in_stream_V_user_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_user_V_0_sel == 1'b1)) begin
        in_stream_V_user_V_0_data_out = in_stream_V_user_V_0_payload_B;
    end else begin
        in_stream_V_user_V_0_data_out = in_stream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((tmp_2_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state23)))) begin
        op_stream_TDATA_blk_n = op_stream_V_data_V_1_state[1'd1];
    end else begin
        op_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((op_stream_V_data_V_1_sel == 1'b1)) begin
        op_stream_V_data_V_1_data_out = op_stream_V_data_V_1_payload_B;
    end else begin
        op_stream_V_data_V_1_data_out = op_stream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_data_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_stream_V_dest_V_1_sel == 1'b1)) begin
        op_stream_V_dest_V_1_data_out = op_stream_V_dest_V_1_payload_B;
    end else begin
        op_stream_V_dest_V_1_data_out = op_stream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_stream_V_id_V_1_sel == 1'b1)) begin
        op_stream_V_id_V_1_data_out = op_stream_V_id_V_1_payload_B;
    end else begin
        op_stream_V_id_V_1_data_out = op_stream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_id_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_stream_V_keep_V_1_sel == 1'b1)) begin
        op_stream_V_keep_V_1_data_out = op_stream_V_keep_V_1_payload_B;
    end else begin
        op_stream_V_keep_V_1_data_out = op_stream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_stream_V_last_V_1_sel == 1'b1)) begin
        op_stream_V_last_V_1_data_out = op_stream_V_last_V_1_payload_B;
    end else begin
        op_stream_V_last_V_1_data_out = op_stream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_last_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_stream_V_strb_V_1_sel == 1'b1)) begin
        op_stream_V_strb_V_1_data_out = op_stream_V_strb_V_1_payload_B;
    end else begin
        op_stream_V_strb_V_1_data_out = op_stream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_stream_V_user_V_1_sel == 1'b1)) begin
        op_stream_V_user_V_1_data_out = op_stream_V_user_V_1_payload_B;
    end else begin
        op_stream_V_user_V_1_data_out = op_stream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        op_stream_V_user_V_1_vld_in = 1'b1;
    end else begin
        op_stream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_2_fu_211_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_2_fu_211_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((in_stream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((op_stream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b1 == ap_block_state23_io) | (op_stream_V_dest_V_1_ack_in == 1'b0) | (op_stream_V_id_V_1_ack_in == 1'b0) | (op_stream_V_last_V_1_ack_in == 1'b0) | (op_stream_V_user_V_1_ack_in == 1'b0) | (op_stream_V_strb_V_1_ack_in == 1'b0) | (op_stream_V_keep_V_1_ack_in == 1'b0) | (op_stream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state23) & ((tmp_8_reg_419 == 1'd1) | (tmp_2_reg_415 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state23_io) | (op_stream_V_dest_V_1_ack_in == 1'b0) | (op_stream_V_id_V_1_ack_in == 1'b0) | (op_stream_V_last_V_1_ack_in == 1'b0) | (op_stream_V_user_V_1_ack_in == 1'b0) | (op_stream_V_strb_V_1_ack_in == 1'b0) | (op_stream_V_keep_V_1_ack_in == 1'b0) | (op_stream_V_data_V_1_ack_in == 1'b0)) & (tmp_2_reg_415 == 1'd1) & (tmp_8_reg_419 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state23 = ((op_stream_V_dest_V_1_ack_in == 1'b0) | (op_stream_V_id_V_1_ack_in == 1'b0) | (op_stream_V_last_V_1_ack_in == 1'b0) | (op_stream_V_user_V_1_ack_in == 1'b0) | (op_stream_V_strb_V_1_ack_in == 1'b0) | (op_stream_V_keep_V_1_ack_in == 1'b0) | (op_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state23_io = ((tmp_2_reg_415 == 1'd1) & (op_stream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_189_p0 = tmp_9_fu_259_p4;

assign in_stream_TREADY = in_stream_V_dest_V_0_state[1'd1];

assign in_stream_V_data_V_0_ack_in = in_stream_V_data_V_0_state[1'd1];

assign in_stream_V_data_V_0_load_A = (in_stream_V_data_V_0_state_cmp_full & ~in_stream_V_data_V_0_sel_wr);

assign in_stream_V_data_V_0_load_B = (in_stream_V_data_V_0_state_cmp_full & in_stream_V_data_V_0_sel_wr);

assign in_stream_V_data_V_0_sel = in_stream_V_data_V_0_sel_rd;

assign in_stream_V_data_V_0_state_cmp_full = ((in_stream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_data_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_data_V_0_vld_out = in_stream_V_data_V_0_state[1'd0];

assign in_stream_V_dest_V_0_ack_in = in_stream_V_dest_V_0_state[1'd1];

assign in_stream_V_dest_V_0_load_A = (in_stream_V_dest_V_0_state_cmp_full & ~in_stream_V_dest_V_0_sel_wr);

assign in_stream_V_dest_V_0_load_B = (in_stream_V_dest_V_0_state_cmp_full & in_stream_V_dest_V_0_sel_wr);

assign in_stream_V_dest_V_0_sel = in_stream_V_dest_V_0_sel_rd;

assign in_stream_V_dest_V_0_state_cmp_full = ((in_stream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_dest_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_dest_V_0_vld_out = in_stream_V_dest_V_0_state[1'd0];

assign in_stream_V_id_V_0_ack_in = in_stream_V_id_V_0_state[1'd1];

assign in_stream_V_id_V_0_load_A = (in_stream_V_id_V_0_state_cmp_full & ~in_stream_V_id_V_0_sel_wr);

assign in_stream_V_id_V_0_load_B = (in_stream_V_id_V_0_state_cmp_full & in_stream_V_id_V_0_sel_wr);

assign in_stream_V_id_V_0_sel = in_stream_V_id_V_0_sel_rd;

assign in_stream_V_id_V_0_state_cmp_full = ((in_stream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_id_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_id_V_0_vld_out = in_stream_V_id_V_0_state[1'd0];

assign in_stream_V_keep_V_0_ack_in = in_stream_V_keep_V_0_state[1'd1];

assign in_stream_V_keep_V_0_load_A = (in_stream_V_keep_V_0_state_cmp_full & ~in_stream_V_keep_V_0_sel_wr);

assign in_stream_V_keep_V_0_load_B = (in_stream_V_keep_V_0_state_cmp_full & in_stream_V_keep_V_0_sel_wr);

assign in_stream_V_keep_V_0_sel = in_stream_V_keep_V_0_sel_rd;

assign in_stream_V_keep_V_0_state_cmp_full = ((in_stream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_keep_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_keep_V_0_vld_out = in_stream_V_keep_V_0_state[1'd0];

assign in_stream_V_last_V_0_ack_in = in_stream_V_last_V_0_state[1'd1];

assign in_stream_V_last_V_0_load_A = (in_stream_V_last_V_0_state_cmp_full & ~in_stream_V_last_V_0_sel_wr);

assign in_stream_V_last_V_0_load_B = (in_stream_V_last_V_0_state_cmp_full & in_stream_V_last_V_0_sel_wr);

assign in_stream_V_last_V_0_sel = in_stream_V_last_V_0_sel_rd;

assign in_stream_V_last_V_0_state_cmp_full = ((in_stream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_last_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_last_V_0_vld_out = in_stream_V_last_V_0_state[1'd0];

assign in_stream_V_strb_V_0_ack_in = in_stream_V_strb_V_0_state[1'd1];

assign in_stream_V_strb_V_0_load_A = (in_stream_V_strb_V_0_state_cmp_full & ~in_stream_V_strb_V_0_sel_wr);

assign in_stream_V_strb_V_0_load_B = (in_stream_V_strb_V_0_state_cmp_full & in_stream_V_strb_V_0_sel_wr);

assign in_stream_V_strb_V_0_sel = in_stream_V_strb_V_0_sel_rd;

assign in_stream_V_strb_V_0_state_cmp_full = ((in_stream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_strb_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_strb_V_0_vld_out = in_stream_V_strb_V_0_state[1'd0];

assign in_stream_V_user_V_0_ack_in = in_stream_V_user_V_0_state[1'd1];

assign in_stream_V_user_V_0_load_A = (in_stream_V_user_V_0_state_cmp_full & ~in_stream_V_user_V_0_sel_wr);

assign in_stream_V_user_V_0_load_B = (in_stream_V_user_V_0_state_cmp_full & in_stream_V_user_V_0_sel_wr);

assign in_stream_V_user_V_0_sel = in_stream_V_user_V_0_sel_rd;

assign in_stream_V_user_V_0_state_cmp_full = ((in_stream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_user_V_0_vld_in = in_stream_TVALID;

assign in_stream_V_user_V_0_vld_out = in_stream_V_user_V_0_state[1'd0];

assign isNeg_fu_328_p3 = sh_assign_fu_322_p2[32'd11];

assign loc_V_1_fu_302_p1 = p_Val2_s_fu_288_p1[51:0];

assign op_stream_TDATA = op_stream_V_data_V_1_data_out;

assign op_stream_TDEST = op_stream_V_dest_V_1_data_out;

assign op_stream_TID = op_stream_V_id_V_1_data_out;

assign op_stream_TKEEP = op_stream_V_keep_V_1_data_out;

assign op_stream_TLAST = op_stream_V_last_V_1_data_out;

assign op_stream_TSTRB = op_stream_V_strb_V_1_data_out;

assign op_stream_TUSER = op_stream_V_user_V_1_data_out;

assign op_stream_TVALID = op_stream_V_dest_V_1_state[1'd0];

assign op_stream_V_data_V_1_ack_in = op_stream_V_data_V_1_state[1'd1];

assign op_stream_V_data_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_data_V_1_load_A = (op_stream_V_data_V_1_state_cmp_full & ~op_stream_V_data_V_1_sel_wr);

assign op_stream_V_data_V_1_load_B = (op_stream_V_data_V_1_state_cmp_full & op_stream_V_data_V_1_sel_wr);

assign op_stream_V_data_V_1_sel = op_stream_V_data_V_1_sel_rd;

assign op_stream_V_data_V_1_state_cmp_full = ((op_stream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_data_V_1_vld_out = op_stream_V_data_V_1_state[1'd0];

assign op_stream_V_dest_V_1_ack_in = op_stream_V_dest_V_1_state[1'd1];

assign op_stream_V_dest_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_dest_V_1_load_A = (op_stream_V_dest_V_1_state_cmp_full & ~op_stream_V_dest_V_1_sel_wr);

assign op_stream_V_dest_V_1_load_B = (op_stream_V_dest_V_1_state_cmp_full & op_stream_V_dest_V_1_sel_wr);

assign op_stream_V_dest_V_1_sel = op_stream_V_dest_V_1_sel_rd;

assign op_stream_V_dest_V_1_state_cmp_full = ((op_stream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_dest_V_1_vld_out = op_stream_V_dest_V_1_state[1'd0];

assign op_stream_V_id_V_1_ack_in = op_stream_V_id_V_1_state[1'd1];

assign op_stream_V_id_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_id_V_1_load_A = (op_stream_V_id_V_1_state_cmp_full & ~op_stream_V_id_V_1_sel_wr);

assign op_stream_V_id_V_1_load_B = (op_stream_V_id_V_1_state_cmp_full & op_stream_V_id_V_1_sel_wr);

assign op_stream_V_id_V_1_sel = op_stream_V_id_V_1_sel_rd;

assign op_stream_V_id_V_1_state_cmp_full = ((op_stream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_id_V_1_vld_out = op_stream_V_id_V_1_state[1'd0];

assign op_stream_V_keep_V_1_ack_in = op_stream_V_keep_V_1_state[1'd1];

assign op_stream_V_keep_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_keep_V_1_load_A = (op_stream_V_keep_V_1_state_cmp_full & ~op_stream_V_keep_V_1_sel_wr);

assign op_stream_V_keep_V_1_load_B = (op_stream_V_keep_V_1_state_cmp_full & op_stream_V_keep_V_1_sel_wr);

assign op_stream_V_keep_V_1_sel = op_stream_V_keep_V_1_sel_rd;

assign op_stream_V_keep_V_1_state_cmp_full = ((op_stream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_keep_V_1_vld_out = op_stream_V_keep_V_1_state[1'd0];

assign op_stream_V_last_V_1_ack_in = op_stream_V_last_V_1_state[1'd1];

assign op_stream_V_last_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_last_V_1_load_A = (op_stream_V_last_V_1_state_cmp_full & ~op_stream_V_last_V_1_sel_wr);

assign op_stream_V_last_V_1_load_B = (op_stream_V_last_V_1_state_cmp_full & op_stream_V_last_V_1_sel_wr);

assign op_stream_V_last_V_1_sel = op_stream_V_last_V_1_sel_rd;

assign op_stream_V_last_V_1_state_cmp_full = ((op_stream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_last_V_1_vld_out = op_stream_V_last_V_1_state[1'd0];

assign op_stream_V_strb_V_1_ack_in = op_stream_V_strb_V_1_state[1'd1];

assign op_stream_V_strb_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_strb_V_1_load_A = (op_stream_V_strb_V_1_state_cmp_full & ~op_stream_V_strb_V_1_sel_wr);

assign op_stream_V_strb_V_1_load_B = (op_stream_V_strb_V_1_state_cmp_full & op_stream_V_strb_V_1_sel_wr);

assign op_stream_V_strb_V_1_sel = op_stream_V_strb_V_1_sel_rd;

assign op_stream_V_strb_V_1_state_cmp_full = ((op_stream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_strb_V_1_vld_out = op_stream_V_strb_V_1_state[1'd0];

assign op_stream_V_user_V_1_ack_in = op_stream_V_user_V_1_state[1'd1];

assign op_stream_V_user_V_1_ack_out = op_stream_TREADY;

assign op_stream_V_user_V_1_load_A = (op_stream_V_user_V_1_state_cmp_full & ~op_stream_V_user_V_1_sel_wr);

assign op_stream_V_user_V_1_load_B = (op_stream_V_user_V_1_state_cmp_full & op_stream_V_user_V_1_sel_wr);

assign op_stream_V_user_V_1_sel = op_stream_V_user_V_1_sel_rd;

assign op_stream_V_user_V_1_state_cmp_full = ((op_stream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_stream_V_user_V_1_vld_out = op_stream_V_user_V_1_state[1'd0];

assign p_Val2_4_fu_399_p3 = ((isNeg_fu_328_p3[0:0] === 1'b1) ? tmp_17_fu_385_p1 : tmp_18_fu_389_p4);

assign p_Val2_s_fu_288_p1 = grp_fu_171_p2;

assign sh_assign_1_cast_fu_353_p1 = $signed(sh_assign_1_fu_345_p3);

assign sh_assign_1_fu_345_p3 = ((isNeg_fu_328_p3[0:0] === 1'b1) ? tmp_3_i_i_i_cast_fu_341_p1 : sh_assign_fu_322_p2);

assign sh_assign_fu_322_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_i_cast1_fu_319_p1));

assign tmp_14_fu_284_p1 = tmp_13_reg_463;

assign tmp_17_fu_385_p1 = tmp_21_fu_377_p3;

assign tmp_18_fu_389_p4 = {{tmp_8_i_i_i_fu_371_p2[84:53]}};

assign tmp_1_i_i_i_cast_fu_315_p1 = tmp_1_i_i_i_fu_306_p4;

assign tmp_1_i_i_i_fu_306_p4 = {{{{1'd1}, {loc_V_1_reg_494}}}, {1'd0}};

assign tmp_21_fu_377_p3 = tmp_6_i_i_i_fu_365_p2[32'd53];

assign tmp_2_fu_211_p2 = ((flag == 8'd1) ? 1'b1 : 1'b0);

assign tmp_3_fu_408_p0 = tmp_3_fu_408_p00;

assign tmp_3_fu_408_p00 = cols;

assign tmp_3_fu_408_p1 = tmp_3_fu_408_p10;

assign tmp_3_fu_408_p10 = rows;

assign tmp_3_i_i_i_cast_fu_341_p1 = $signed(tmp_3_i_i_i_fu_336_p2);

assign tmp_3_i_i_i_fu_336_p2 = (11'd1023 - loc_V_reg_488);

assign tmp_5_fu_254_p1 = tmp_fu_250_p1;

assign tmp_5_i_i_i_cast_fu_361_p1 = $unsigned(sh_assign_1_cast_fu_353_p1);

assign tmp_5_i_i_i_fu_357_p1 = $unsigned(sh_assign_1_cast_fu_353_p1);

assign tmp_6_i_i_i_fu_365_p2 = tmp_1_i_i_i_fu_306_p4 >> tmp_5_i_i_i_cast_fu_361_p1;

assign tmp_8_fu_217_p2 = ((tmp_3_fu_408_p2 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_8_i_i_i_fu_371_p2 = tmp_1_i_i_i_cast_fu_315_p1 << tmp_5_i_i_i_fu_357_p1;

assign tmp_9_fu_259_p4 = {{in_stream_V_data_V_0_data_out[15:8]}};

assign tmp_fu_250_p1 = in_stream_V_data_V_0_data_out[7:0];

assign tmp_i_i_i_i_cast1_fu_319_p1 = loc_V_reg_488;

endmodule //cv_hw
